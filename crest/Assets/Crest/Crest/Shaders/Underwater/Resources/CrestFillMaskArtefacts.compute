// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

// Checks both orthogonal and diagonal pixels to fill artefacts in the mask. If checked pixels are all the same then it
// assumes that the current pixel should also be the same and fixes it.

#pragma kernel FillMaskArtefacts

RWTexture2D<float> _CrestOceanMaskTexture;

[numthreads(8, 8, 1)]
void FillMaskArtefacts(const uint3 id : SV_DispatchThreadID)
{
    const uint3 offset = uint3(1, -1, 0);

    // Check orthogonal pixels.
    {
        const float4 pixels = float4
        (
            _CrestOceanMaskTexture[id.xy + offset.xz],
            _CrestOceanMaskTexture[id.xy + offset.yz],
            _CrestOceanMaskTexture[id.xy + offset.zy],
            _CrestOceanMaskTexture[id.xy + offset.zx]
        );

        // If these pixels are all the same, then it is valid that this pixel also equals them.
        if (pixels.x == pixels.y && pixels.y == pixels.z && pixels.z == pixels.w)
        {
            _CrestOceanMaskTexture[id.xy] = pixels.x;
            return;
        }
    }

    // Check diagonal pixels.
    {
        const float4 pixels = float4
        (
            _CrestOceanMaskTexture[id.xy + offset.xx],
            _CrestOceanMaskTexture[id.xy + offset.yy],
            _CrestOceanMaskTexture[id.xy + offset.xy],
            _CrestOceanMaskTexture[id.xy + offset.yx]
        );

        // If these pixels are all the same, then it is valid that this pixel also equals them.
        if (pixels.x == pixels.y && pixels.y == pixels.z && pixels.z == pixels.w)
        {
            _CrestOceanMaskTexture[id.xy] = pixels.x;
            return;
        }
    }

    _CrestOceanMaskTexture[id.xy] = _CrestOceanMaskTexture[id.xy];
}
